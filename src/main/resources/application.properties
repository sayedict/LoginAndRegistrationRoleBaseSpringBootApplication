#spring.thymeleaf.mode=LEGACYHTML5
#spring.thymeleaf.cache=false
##security.basic.enabled=false
#spring.jpa.show-sql = true
#management.security.enabled=${security.basic.enabled}

spring.datasource.url = jdbc:mysql://localhost:3306/schooldb?useSSL=false
spring.datasource.username=root
spring.datasource.password=admin
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect


# ===============================
# = DATA SOURCE
# ===============================
#spring.queries.users-query=select email, password, active from users where email=?
#spring.queries.roles-query=select u.email, r.role from users u inner join user_role ur on(u.id=ur.user_id) inner join user_authority r on(ur.role_id=r.id) where u.email=?

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
#spring.datasource.url = jdbc:mysql://localhost:3306/schooldb?useSSL=false

# Username and password
#spring.datasource.username = quickquery
#spring.datasource.password = school@pass

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
#spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
